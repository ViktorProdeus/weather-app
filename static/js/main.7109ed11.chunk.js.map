{"version":3,"sources":["helpers/helpers.js","components/Search/Search.jsx","dall/weatherApi.js","bll/citiesReducer.js","components/UpdateButton/UpdateButton.jsx","components/Button/Button.jsx","components/CitiesList/citiesList.jsx","App.jsx","reportWebVitals.js","bll/store.js","index.jsx"],"names":["getLocalDate","value","day","Date","getDate","month","getMonth","year","getFullYear","get2digits","hours","getHours","minutes","getMinutes","seconds","getSeconds","SearchField","cities","query","searchRef","searchQuery","setSearchQuery","isOpen","dropdownIsOpen","addToListCallback","error","filteredCities","filter","city","name","toLowerCase","trim","startsWith","isOpenClass","className","onSubmit","e","preventDefault","Typography","sx","fontSize","ref","TextField","label","fullWidth","onFocus","onChange","currentTarget","placeholder","autoComplete","map","index","component","onClick","paddingLeft","instance","axios","create","baseURL","weatherAPI","get","promise","data","id","dt","humidity","main","pressure","temp","icon","weather","deg","wind","speed","initialState","checked","ADD_CITY","REMOVE_CITY","UPDATE_DATA","CHANGE_CHECKED","updateCity","setMessage","dispatch","a","newData","type","response","message","UpdateButton","useDispatch","useSelector","state","citiesReducer","Checkbox","color","changeChecked","Button","size","callback","variant","CitiesList","setMessageError","ICON_URL","ROTATE","Card","fontWeight","marginBottom","marginTop","width","height","src","alt","Math","round","style","transform","App","useRef","useState","listening","setListening","setIsOpen","setError","setTimeout","resetField","updateCitiesList","forEach","c","useEffect","dropDownRef","current","document","addEventListener","evt","contains","target","listenForOutsideClicks","timerID","clearTimeout","Search","innerHTML","isCityInList","some","addToList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","newCities","updateCities","persistedState","localStorage","getItem","JSON","parse","store","createStore","applyMiddleware","thunkMiddleware","subscribe","setItem","stringify","getState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7109ed11.chunk.js","sourcesContent":["// for cities name\r\nexport const filterCities = (cities, query) => {\r\n    if (!query) {\r\n        return [];\r\n    }\r\n\r\n    return cities.filter((city) => {\r\n        const cityName = city.name.toLowerCase();\r\n        return cityName.trim().startsWith(query.toLowerCase());\r\n    });\r\n};\r\n\r\n// convert response to dataTime\r\nexport const getLocalDate = (value) => {\r\n    const ONE_SECOND = 1000;\r\n    value *= ONE_SECOND\r\n    const day = new Date(value).getDate();\r\n    const monthArr = [\"Января\", \"Февраля\", \"Марта\", \"Апреля\", \"Мая\", \"Июня\", \"Июля\", \"Августа\", \"Сентября\", \"Октября\", \"Ноября\", \"Декабря\",];\r\n    const month = monthArr[new Date(value).getMonth()];\r\n    const year = new Date(value).getFullYear();\r\n    const MAX_VALUE = 10;\r\n\r\n    const get2digits = (value) => value >= MAX_VALUE ? value : '0' + value\r\n    const hours = get2digits(new Date(value).getHours());\r\n\r\n    const minutes = get2digits(new Date(value).getMinutes());\r\n    const seconds = get2digits(new Date(value).getSeconds());\r\n\r\n    return `${day} ${month} ${year} ${hours}:${minutes}:${seconds}`\r\n}\r\n\r\n// subscribe to Outside clicks\r\nexport const listenForOutsideClicks = (listening, setListening, dropDownRef, setIsOpen) => () => {\r\n    if (listening) return;\r\n    if (!dropDownRef.current) return;\r\n    setListening(true);\r\n    [`click`, `touchstart`].forEach((type) => {\r\n        document.addEventListener(type, (evt) => {\r\n            if (dropDownRef.current.contains(evt.target)) return;\r\n            setIsOpen(false);\r\n        });\r\n    });\r\n};","import cities from \"../../dataJson/cities.json\";\r\nimport { filterCities } from \"../../helpers/helpers\";\r\nimport { TextField, Typography } from \"@mui/material\";\r\n\r\n\r\nconst SearchField = ({searchRef, searchQuery, setSearchQuery, isOpen, dropdownIsOpen, addToListCallback, error}) => {\r\n    const filteredCities = filterCities(cities, searchQuery);\r\n    const onFormSubmit = (e) => {\r\n        e.preventDefault()\r\n    }\r\n    const isOpenClass = isOpen ? \"search open\" : \"search\"\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <Typography sx={{fontSize: 16}} className=\"error\">{error}</Typography>\r\n            <div ref={searchRef} className={isOpenClass}>\r\n                <TextField\r\n                    label=\"Выбрать город\"\r\n                    fullWidth\r\n                    onFocus={() => dropdownIsOpen(true)}\r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.currentTarget.value)}\r\n                    placeholder=\"Выбрать город\"\r\n                    name=\"city\"\r\n                    autoComplete=\"off\"\r\n                />\r\n\r\n                <div className=\"dropdown\">\r\n                    <ul>\r\n                        {filteredCities.map((city, index) => (\r\n                            <Typography component=\"li\" onClick={addToListCallback} key={index} value={city.name}\r\n                                        paddingLeft={1}>{city.name}</Typography>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchField;","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://api.openweathermap.org/data/2.5/\",\r\n});\r\n\r\nconst API_KEY = \"fa26aa21b1f0200231c3c0c9564e0339\";\r\n\r\nexport const weatherAPI = {\r\n    async get(city) {\r\n        const promise = await instance.get(`weather?q=${city}&units=metric&appid=${API_KEY}&lang=ru`);\r\n        const data = promise.data;\r\n\r\n        return {\r\n            id: data.id,\r\n            dt: data.dt,\r\n            humidity: data.main.humidity,\r\n            pressure: data.main.pressure,\r\n            temp: data.main.temp,\r\n            name: data.name,\r\n            icon: data.weather[0].icon,\r\n            deg: data.wind.deg,\r\n            speed: data.wind.speed,\r\n        }\r\n    }\r\n}","import { weatherAPI } from \"../dall/weatherApi\";\r\n\r\nconst initialState = {\r\n    cities: [],\r\n    checked: false,\r\n};\r\n\r\n\r\nconst ADD_CITY = \"cities/ADD_CITY\";\r\nconst REMOVE_CITY = \"cities/REMOVE_CITY\";\r\nconst UPDATE_DATA = \"cities/UPDATE_DATA\";\r\nconst CHANGE_CHECKED = \"cities/CHANGE_CHECKED\";\r\n\r\nexport const citiesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CITY: {\r\n            return {\r\n                ...state,\r\n                cities: [action.data, ...state.cities]\r\n            }\r\n        }\r\n\r\n        case REMOVE_CITY: {\r\n            let newCities = state.cities.filter(city => city.id !== action.id);\r\n\r\n            return {\r\n                ...state,\r\n                cities: newCities\r\n            };\r\n        }\r\n\r\n        case UPDATE_DATA: {\r\n            const updateCities = state.cities.map((city) => city.id === action.data.id ? {...action.data} : city);\r\n\r\n            return {\r\n                ...state,\r\n                cities: updateCities\r\n            }\r\n        }\r\n\r\n        case CHANGE_CHECKED: {\r\n\r\n            return {\r\n                ...state,\r\n                checked: action.checked\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n// actions\r\nexport const addCity = (data) => ({\r\n    type: ADD_CITY,\r\n    data,\r\n});\r\n\r\nexport const removeCity = (data) => ({\r\n    type: REMOVE_CITY,\r\n    id: data.id,\r\n});\r\n\r\nexport const updateData = (data) => ({\r\n    type: UPDATE_DATA,\r\n    data,\r\n});\r\n\r\nexport const changeChecked = (checked) => ({\r\n    type: CHANGE_CHECKED,\r\n    checked,\r\n});\r\n\r\n// thunks\r\nexport const addToList = (cities, city, setMessage, resetField) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const newData = await weatherAPI.get(city);\r\n            const isCityInList = cities.some((c) => c.id === newData.id);\r\n\r\n            isCityInList ? setMessage(\"этот город уже добавлен в список\") : dispatch(addCity(newData));\r\n            !isCityInList && resetField()\r\n\r\n        } catch (e) {\r\n            if (e.response) {\r\n                setMessage(\"город не найден\");\r\n            } else {\r\n                setMessage(e.message)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateCity = (city, setMessage) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const newData = await weatherAPI.get(city);\r\n\r\n            dispatch(updateData(newData))\r\n\r\n        } catch (e) {\r\n            if (e.response) {\r\n                setMessage(e.response.data.message);\r\n            } else {\r\n                setMessage(e.message)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeChecked } from \"../../bll/citiesReducer\";\r\nimport { Checkbox, Typography } from \"@mui/material\";\r\n\r\nconst UpdateButton = () => {\r\n    const dispatch = useDispatch()\r\n    const checked = useSelector(state => state.citiesReducer.checked)\r\n    const onChangeCallback = (e) => dispatch(changeChecked(e.currentTarget.checked));\r\n    return (\r\n        <div className=\"updateButton\">\r\n            <label>\r\n                <Typography>Автообновление 5с</Typography>\r\n\r\n                <Checkbox\r\n                    color=\"primary\"\r\n                    checked={checked}\r\n                    onChange={onChangeCallback}\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateButton;","import React from 'react';\r\nimport ButtonMui from '@mui/material/Button';\r\n\r\nconst Button = ({size, color, type, name, callback, variant}) => {\r\n    return (\r\n        <ButtonMui variant={variant} size={size} color={color} type={type} onClick={callback}>\r\n            {name}\r\n        </ButtonMui>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport { BiUpArrowAlt } from \"react-icons/all\";\r\nimport { getLocalDate } from \"../../helpers/helpers\";\r\nimport { removeCity, updateCity } from \"../../bll/citiesReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Button from \"../Button/Button\";\r\nimport { Card, Typography } from \"@mui/material\";\r\n\r\nconst CitiesList = ({cities, setMessageError}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ul className=\"citiesList\">\r\n            {cities && cities.map((city) => {\r\n                const ICON_URL = `https://openweathermap.org/img/wn/${city.icon}@2x.png`;\r\n                const ROTATE = `rotate(${city.deg}deg)`;\r\n\r\n                const removeCityCallback = () => dispatch(removeCity(city));\r\n                const updateCityCallback = () => dispatch(updateCity(city.name, setMessageError));\r\n\r\n                return (\r\n                    <Card component=\"li\" key={city.id} className=\"citiesItem\">\r\n                        <Typography variant=\"h3\" sx={{fontSize: 16, fontWeight: \"bold\"}} marginBottom={3}\r\n                                    marginTop={3}>Город: <span>{city.name}</span></Typography>\r\n                        <div>\r\n                            <img width={100} height={100} src={ICON_URL} alt=\"icon-temp\" />\r\n                        </div>\r\n                        <Typography sx={{fontSize: 14}} color=\"text.secondary\" marginBottom={2}>\r\n                            Температура: <span>{Math.round(city.temp)}</span>&#176;C\r\n\r\n                        </Typography>\r\n\r\n                        <Typography sx={{fontSize: 14}} color=\"text.secondary\"\r\n                                    marginBottom={2}>Влажность: <span>{city.humidity}</span>%</Typography>\r\n\r\n                        <Typography sx={{fontSize: 14}} color=\"text.secondary\" marginBottom={2}>\r\n                            Атмосферное давление:\r\n                            <span>{city.pressure}</span>\r\n                        </Typography>\r\n\r\n                        <Typography sx={{fontSize: 14}} color=\"text.secondary\" marginBottom={2}>\r\n                            Сила и направление ветра:\r\n                            <span>{city.speed}</span>\r\n                            М/С -\r\n                            <BiUpArrowAlt size={20} style={{transform: ROTATE}} color=\"red\" />\r\n                        </Typography>\r\n\r\n                        <Typography sx={{fontSize: 14}} color=\"text.secondary\" marginBottom={3}>\r\n                            Последнее обновление данных:\r\n                            <span>{getLocalDate(city.dt)}</span>\r\n                        </Typography>\r\n\r\n                        <div className=\"buttons\">\r\n                            <Button\r\n                                type=\"button\"\r\n                                size=\"medium\"\r\n                                variant=\"contained\"\r\n                                color=\"error\"\r\n                                name=\"Удалить\"\r\n                                callback={removeCityCallback}\r\n                            />\r\n\r\n                            <Button\r\n                                type=\"button\"\r\n                                size=\"medium\"\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                name=\"Обновить\"\r\n                                callback={updateCityCallback}\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default CitiesList;","import \"./App.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport SearchField from \"./components/Search/Search\";\nimport { listenForOutsideClicks } from \"./helpers/helpers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addToList, updateCity } from \"./bll/citiesReducer\";\nimport UpdateButton from \"./components/UpdateButton/UpdateButton\";\nimport CitiesList from \"./components/CitiesList/citiesList\";\n\nconst App = () => {\n    const ONE_HUNDRED_MS = 100;\n    const FIVE_SECONDS = 5000;\n    const searchRef = useRef(null);\n    const [listening, setListening] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    const cities = useSelector(state => state.citiesReducer.cities);\n    const checked = useSelector(state => state.citiesReducer.checked);\n    const dispatch = useDispatch();\n\n    const setMessageError = (message) => {\n        setError(\"\")\n        setTimeout(() => setError(message), ONE_HUNDRED_MS)\n    }\n\n    const dropdownIsOpen = (isOpen) => {\n        setIsOpen(isOpen);\n        setError(\"\");\n    };\n\n    const resetField = () => {\n        dropdownIsOpen(false);\n        setSearchQuery(\"\");\n    };\n\n    const addToListCallback = (e) => {\n        e.preventDefault();\n        const city = e.currentTarget.innerHTML;\n        dispatch(addToList(cities, city, setMessageError, resetField));\n    }\n\n    const updateCitiesList = () => {\n        cities.forEach(c => dispatch(updateCity(c.name, setMessageError)))\n    }\n\n\n// eslint-disable-next-line\n    useEffect(listenForOutsideClicks(\n        listening,\n        setListening,\n        searchRef,\n        setIsOpen,\n    )); // for react-onclickoutside plugin\n\n    useEffect(() => {\n        let timerID;\n\n        if (checked) {\n            timerID = setTimeout(updateCitiesList, FIVE_SECONDS);\n        }\n\n        return () => clearTimeout(timerID);\n    });\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"searchWrap\">\n                <SearchField\n                    searchRef={searchRef}\n                    isOpen={isOpen}\n                    dropdownIsOpen={dropdownIsOpen}\n                    searchQuery={searchQuery}\n                    setSearchQuery={setSearchQuery}\n                    addToListCallback={addToListCallback}\n                    error={error}\n                />\n\n                <UpdateButton />\n            </div>\n\n            <CitiesList cities={cities} setMessageError={setMessageError} />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { citiesReducer } from \"./citiesReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    citiesReducer,\r\n});\r\n\r\nconst persistedState = localStorage.getItem('reduxState')\r\n    ? JSON.parse(localStorage.getItem('reduxState'))\r\n    : {};\r\n\r\nexport const store = createStore(rootReducer, persistedState, applyMiddleware(thunkMiddleware));\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()));\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./bll/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}